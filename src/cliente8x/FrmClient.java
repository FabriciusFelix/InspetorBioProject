/*  
 *
 * Software de comunica√ß√£o 8x em java
 *
 * 
 */

package cliente8x;

import java.util.Scanner;

import javax.swing.JOptionPane;

import tcpcom.TcpClient;
import java.util.Date;
import java.text.SimpleDateFormat;
import javax.swing.*;
import java.io.*;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;

/**
 *
 */

public class FrmClient extends javax.swing.JFrame {

	/** Creates new form FrmMain */

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	public boolean validarNumero(String txt) {
		try {
			int num = Integer.parseInt(txt);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
	}

	// ---------------------Converte array em string no formato da
	// Henry-------------------------
	public static String textFormat(char[] data) {
		String aux = "", aux2 = "", str = "";
		char BYTE_INIT, BYTE_END, BYTE_TAM[] = { 0, 0 }, BYTE_CKSUM;
		BYTE_INIT = (char) Integer.valueOf("2", 16).intValue();// conf. bit inicial
		BYTE_END = (char) Integer.valueOf("3", 16).intValue();// conf. bit final
		BYTE_TAM[0] = (char) data.length;// conf. tamanho dos dados
		BYTE_TAM[1] = (char) Integer.valueOf("0", 16).intValue();
		aux2 += BYTE_INIT; // Inserindo byte inicial
		aux2 += BYTE_TAM[0]; // Inserindo byte do tamanho
		aux2 += BYTE_TAM[1];
		for (char chr : data) {
			str += chr;
		}
		aux = new String(aux2 + str); // concatenando com a informa√ß√£o

		BYTE_CKSUM = aux.charAt(1);// Calculo do Checksum
		for (int a = 2; a < aux.length(); a++) {
			BYTE_CKSUM = (char) (BYTE_CKSUM ^ aux.charAt(a));
		}
		aux += BYTE_CKSUM; // Inserindo Checksum
		aux += BYTE_END; // Inserindo byte Final
		return aux;

	}

//------------------Converte String em Hexa ( opcional - verificar)----------------------
	public static String stringHexFormat(String str) {
		String aux = "", temp = "";
		for (char ch : str.toCharArray()) {
			temp += Integer.toHexString(ch).toUpperCase();
			// Converte Hexa em String
			if (temp.length() == 1) {
				aux += "0" + temp + " ";// se tiver 1 digito complementa com 0
			} else {
				aux += temp + " ";
			}
			temp = new String();
		}
		return aux;
	}
	/*
	 * public class loop extends Thread{
	 * 
	 * @Override //Thread do loop de arquivo public void run() { int cont =1; if
	 * (!(validarNumero(jtfQtdeLoop.getText()))){
	 * JOptionPane.showMessageDialog(null, "Digite um n√∫mero v√°lido!", "Erro",
	 * JOptionPane.WARNING_MESSAGE); jtfQtdeLoop.setText("1");
	 * 
	 * }else{ while(cont <= Integer.parseInt(jtfQtdeLoop.getText()) ||
	 * jchkLoopInf.isSelected()){ //verifica o numero de loops ou infinito caso a
	 * caixa de sele√ß√£o //esteja selecionada if (jchkLoopInf.isSelected()){
	 * jlbProcLoop.setText("Processando loop "+Integer.toString(cont) +" de ‚àû");
	 * }else{ jlbProcLoop.setText("Processando loop "+Integer.toString(cont)
	 * +" de "+jtfQtdeLoop.getText()); } gravarDados gd = new gravarDados();
	 * gd.start(); while (gd.isAlive()){ try{ Thread.sleep(10); }catch(Exception e){
	 * } } cont++; } } } }
	 * 
	 */
	/*
	 * ----------------------------------------- private void
	 * jbtnEnviarActionPerformed(java.awt.event.ActionEvent evt)
	 * {//GEN-FIRST:event_jbtnEnviarActionPerformed boolean verNum = true; if
	 * (jchkConectar.isSelected()){ //verificar conex√£o{ if
	 * (jlstPacotes.isSelectedIndex(15)){ if
	 * (!(validarNumero(jtfTextoSeg.getText()))){
	 * JOptionPane.showMessageDialog(null, "Digite um n√∫mero v√°lido de segundos!",
	 * "Erro", JOptionPane.WARNING_MESSAGE); jtfTextoSeg.setText("3"); verNum =
	 * false; } } if (verNum){ try { char[] data; data =
	 * jtfEnvio.getText().toCharArray(); String str = "", aux = ""; str =
	 * textFormat(data);//formatando texto (cabe√ßalho, checksum e Byte final) aux =
	 * stringHexFormat(str);//formatando para numero Hexadecimal
	 * client.sendData(str.toCharArray()); //enviando dados
	 * jtaDadosEnv.append(str+"\n\n"); jtaDadosBytesEnv.append(aux+"\n\n"); } catch
	 * (Exception e) { } } } else{ JOptionPane.showMessageDialog(null,
	 * "Precisa estar conectado para " + "efetuar esta opera√ß√£o!","Erro",
	 * JOptionPane.WARNING_MESSAGE); } }//GEN-LAST:event_jbtnEnviarActionPerformed
	 */
//    private void jchkConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkConectarActionPerformed
	// if (jchkConectar.isSelected()) {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		TcpClient client;

		System.out.println("Digite o Ip");
		String ip = sc.nextLine();
		System.out.println("Digite a Porta");
		int porta = sc.nextInt();

		client = new TcpClient(ip, Integer.valueOf(porta));
		client.connect();
		if (client.isConnected()) {

			System.out.println("Cliente conectado");
			try {
				char[] data;
				System.out.println("Digite o comando a ser enviado no equipamento");
				sc.nextLine();
				String comando = sc.nextLine();
				data = comando.toCharArray();
				String aux = "", temp = "";
				String str = "";
				str = textFormat(data);// formatando texto (cabe√ßalho, checksum e Byte final)
				aux = stringHexFormat(str);// formatando para n˙mero Hexadecimal
				System.out.println("Enviando dados");
				client.sendData(str.toCharArray()); // enviando dados
				// jtaDadosEnv.append(str+"\n\n");
				// jtaDadosBytesEnv.append(aux+"\n\n");
				if (client.availableData() > 0) {
					char[] temp1 = client.receiveData(client.availableData()); // recebendo dados
					String str1 = "", aux1 = "";
					for (char chr : temp1) {
						str1 += chr;
					}
					System.out.println(str1 + "\n\n");
					aux1 = stringHexFormat(str1);
					System.out.println(aux1 + "\n\n");

				}
				Thread.sleep(500); // esperando resposta
				// }
			} catch (Exception e) {
			}
		} else {
			JOptionPane.showMessageDialog(null, "Precisa estar conectado para " + "efetuar esta opera√ß√£o!", "Erro",
					JOptionPane.WARNING_MESSAGE);
		}

		new Thread(new Runnable() {
			public void run() {
				try {
					 
					
				} catch (Exception e) {

				}

				System.out.println("Thread");

			}
		}).start();

	}
}
